/*
 * -------------------------------------------------
 *  ameynert/nf-arcasHLA Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  help = false
  input = '*.bam'
  outdir = 'output'
  name = 'batch'
}

executor = "sge"

process {

  beforeScript = """
  . /etc/profile.d/modules.sh
  sleep 2;
  """
  module = 'igmm/apps/python/3.7.3'
  module = 'anaconda/5.3.1'
  penv = "sharedmem"

  cpus = 1
  clusterOptions = "-l h_vmem=4G -l h_rt=1:00:00"

  withName: extract_reads {
    clusterOptions = "-l h_vmem=8G -pe sharedmem 1 -l h_rt=4:00:00"
  }

  withName: genotype {
    clusterOptions = "-l h_vmem=8G -pe sharedmem 4 -l h_rt=2:00:00"
  }

  withName: merge {
    clusterOptions = "-l h_vmem=4G -pe sharedmem 1 -l h_rt=1:00:00"
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 256.GB
  max_cpus = 16
  max_time = 240.h
}

profiles {

  conda {
    process.conda = "$baseDir/environment.yml"
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
